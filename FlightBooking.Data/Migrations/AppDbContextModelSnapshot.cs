// <auto-generated />
using System;
using FlightBooking.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightBooking.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightBooking.Domain.Entities.Airports.Airport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IATA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ICAO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Airports");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5601),
                            IATA = "JFK",
                            ICAO = "KJFK",
                            IsDelete = false,
                            Name = "Uzbekistan International Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            City = "Los Angeles",
                            Country = "USA",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5607),
                            IATA = "LAX",
                            ICAO = "KLAX",
                            IsDelete = false,
                            Name = "Los Angeles International Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3L,
                            City = "London",
                            Country = "UK",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5609),
                            IATA = "LHR",
                            ICAO = "EGLL",
                            IsDelete = false,
                            Name = "Heathrow Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4L,
                            City = "Paris",
                            Country = "France",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5610),
                            IATA = "CDG",
                            ICAO = "LFPG",
                            IsDelete = false,
                            Name = "Charles de Gaulle Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5L,
                            City = "Tokyo",
                            Country = "Japan",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5612),
                            IATA = "NRT",
                            ICAO = "RJAA",
                            IsDelete = false,
                            Name = "Andijan International Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6L,
                            City = "Dubai",
                            Country = "UAE",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5613),
                            IATA = "DXB",
                            ICAO = "OMDB",
                            IsDelete = false,
                            Name = "Dubai International Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7L,
                            City = "Sydney",
                            Country = "Australia",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5614),
                            IATA = "SYD",
                            ICAO = "YSSY",
                            IsDelete = false,
                            Name = "Sydney Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8L,
                            City = "Beijing",
                            Country = "China",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5616),
                            IATA = "PEK",
                            ICAO = "ZBAA",
                            IsDelete = false,
                            Name = "Beijing Capital International Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9L,
                            City = "Nairobi",
                            Country = "Kenya",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5617),
                            IATA = "NBO",
                            ICAO = "HKJK",
                            IsDelete = false,
                            Name = "Jomo Kenyatta International Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10L,
                            City = "Tel Aviv",
                            Country = "Israel",
                            CreatedAt = new DateTime(2023, 9, 4, 13, 56, 4, 131, DateTimeKind.Utc).AddTicks(5618),
                            IATA = "TLV",
                            ICAO = "LLBG",
                            IsDelete = false,
                            Name = "Ben Gurion Airport",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.Bookings.Booking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfPassengers")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FlightId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.Customers.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.Flights.Flight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ArrivalAirportId")
                        .HasColumnType("bigint");

                    b.Property<string>("ArrivalCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AvailableSeats")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("DepartureAirportId")
                        .HasColumnType("bigint");

                    b.Property<string>("DepartureCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ArrivalAirportId");

                    b.HasIndex("DepartureAirportId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.Bookings.Booking", b =>
                {
                    b.HasOne("FlightBooking.Domain.Entities.Customers.Customer", "Customer")
                        .WithMany("Bookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Entities.Flights.Flight", "Flight")
                        .WithMany("Bookings")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.Flights.Flight", b =>
                {
                    b.HasOne("FlightBooking.Domain.Entities.Airports.Airport", "ArrivalAirport")
                        .WithMany()
                        .HasForeignKey("ArrivalAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlightBooking.Domain.Entities.Airports.Airport", "DepartureAirport")
                        .WithMany()
                        .HasForeignKey("DepartureAirportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ArrivalAirport");

                    b.Navigation("DepartureAirport");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.Customers.Customer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("FlightBooking.Domain.Entities.Flights.Flight", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
